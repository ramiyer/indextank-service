/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.flaptor.indextank.rpc;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

@SuppressWarnings("all") public class Indexer {

  public interface Iface {

    public void addDoc(String docid, Document doc, int timestamp_boost, Map<Integer,Double> boosts) throws IndextankException, TException;

    public void updateTimestampBoost(String docid, int timestamp_boost) throws IndextankException, TException;

    public void updateBoost(String docid, Map<Integer,Double> boosts) throws IndextankException, TException;

    public void updateCategories(String docid, Map<String,String> categories) throws IndextankException, TException;

    public void delDoc(String docid) throws IndextankException, TException;

    public void promoteResult(String docid, String query) throws IndextankException, TException;

    public void dump() throws IndextankException, TException;

    public void addScoreFunction(int functionIndex, String definition) throws IndextankException, TException;

    public void removeScoreFunction(int functionIndex) throws IndextankException, TException;

    public Map<Integer,String> listScoreFunctions() throws IndextankException, TException;

    public IndexerStats stats() throws IndextankException, TException;

    public Map<String,String> get_stats() throws IndextankException, TException;

    public void force_gc() throws IndextankException, TException;

    public IndexerStatus getStatus() throws TException;

    public void ping() throws TException;

    public void startFullRecovery() throws TException;

  }

  public interface AsyncIface {

    public void addDoc(String docid, Document doc, int timestamp_boost, Map<Integer,Double> boosts, AsyncMethodCallback<AsyncClient.addDoc_call> resultHandler) throws TException;

    public void updateTimestampBoost(String docid, int timestamp_boost, AsyncMethodCallback<AsyncClient.updateTimestampBoost_call> resultHandler) throws TException;

    public void updateBoost(String docid, Map<Integer,Double> boosts, AsyncMethodCallback<AsyncClient.updateBoost_call> resultHandler) throws TException;

    public void updateCategories(String docid, Map<String,String> categories, AsyncMethodCallback<AsyncClient.updateCategories_call> resultHandler) throws TException;

    public void delDoc(String docid, AsyncMethodCallback<AsyncClient.delDoc_call> resultHandler) throws TException;

    public void promoteResult(String docid, String query, AsyncMethodCallback<AsyncClient.promoteResult_call> resultHandler) throws TException;

    public void dump(AsyncMethodCallback<AsyncClient.dump_call> resultHandler) throws TException;

    public void addScoreFunction(int functionIndex, String definition, AsyncMethodCallback<AsyncClient.addScoreFunction_call> resultHandler) throws TException;

    public void removeScoreFunction(int functionIndex, AsyncMethodCallback<AsyncClient.removeScoreFunction_call> resultHandler) throws TException;

    public void listScoreFunctions(AsyncMethodCallback<AsyncClient.listScoreFunctions_call> resultHandler) throws TException;

    public void stats(AsyncMethodCallback<AsyncClient.stats_call> resultHandler) throws TException;

    public void get_stats(AsyncMethodCallback<AsyncClient.get_stats_call> resultHandler) throws TException;

    public void force_gc(AsyncMethodCallback<AsyncClient.force_gc_call> resultHandler) throws TException;

    public void getStatus(AsyncMethodCallback<AsyncClient.getStatus_call> resultHandler) throws TException;

    public void ping(AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws TException;

    public void startFullRecovery(AsyncMethodCallback<AsyncClient.startFullRecovery_call> resultHandler) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void addDoc(String docid, Document doc, int timestamp_boost, Map<Integer,Double> boosts) throws IndextankException, TException
    {
      send_addDoc(docid, doc, timestamp_boost, boosts);
      recv_addDoc();
    }

    public void send_addDoc(String docid, Document doc, int timestamp_boost, Map<Integer,Double> boosts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addDoc", TMessageType.CALL, ++seqid_));
      addDoc_args args = new addDoc_args();
      args.set_docid(docid);
      args.set_doc(doc);
      args.set_timestamp_boost(timestamp_boost);
      args.set_boosts(boosts);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addDoc() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addDoc failed: out of sequence response");
      }
      addDoc_result result = new addDoc_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void updateTimestampBoost(String docid, int timestamp_boost) throws IndextankException, TException
    {
      send_updateTimestampBoost(docid, timestamp_boost);
      recv_updateTimestampBoost();
    }

    public void send_updateTimestampBoost(String docid, int timestamp_boost) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateTimestampBoost", TMessageType.CALL, ++seqid_));
      updateTimestampBoost_args args = new updateTimestampBoost_args();
      args.set_docid(docid);
      args.set_timestamp_boost(timestamp_boost);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateTimestampBoost() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateTimestampBoost failed: out of sequence response");
      }
      updateTimestampBoost_result result = new updateTimestampBoost_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void updateBoost(String docid, Map<Integer,Double> boosts) throws IndextankException, TException
    {
      send_updateBoost(docid, boosts);
      recv_updateBoost();
    }

    public void send_updateBoost(String docid, Map<Integer,Double> boosts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBoost", TMessageType.CALL, ++seqid_));
      updateBoost_args args = new updateBoost_args();
      args.set_docid(docid);
      args.set_boosts(boosts);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateBoost() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBoost failed: out of sequence response");
      }
      updateBoost_result result = new updateBoost_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void updateCategories(String docid, Map<String,String> categories) throws IndextankException, TException
    {
      send_updateCategories(docid, categories);
      recv_updateCategories();
    }

    public void send_updateCategories(String docid, Map<String,String> categories) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateCategories", TMessageType.CALL, ++seqid_));
      updateCategories_args args = new updateCategories_args();
      args.set_docid(docid);
      args.set_categories(categories);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateCategories() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateCategories failed: out of sequence response");
      }
      updateCategories_result result = new updateCategories_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void delDoc(String docid) throws IndextankException, TException
    {
      send_delDoc(docid);
      recv_delDoc();
    }

    public void send_delDoc(String docid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("delDoc", TMessageType.CALL, ++seqid_));
      delDoc_args args = new delDoc_args();
      args.set_docid(docid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_delDoc() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "delDoc failed: out of sequence response");
      }
      delDoc_result result = new delDoc_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void promoteResult(String docid, String query) throws IndextankException, TException
    {
      send_promoteResult(docid, query);
      recv_promoteResult();
    }

    public void send_promoteResult(String docid, String query) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("promoteResult", TMessageType.CALL, ++seqid_));
      promoteResult_args args = new promoteResult_args();
      args.set_docid(docid);
      args.set_query(query);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_promoteResult() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "promoteResult failed: out of sequence response");
      }
      promoteResult_result result = new promoteResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void dump() throws IndextankException, TException
    {
      send_dump();
      recv_dump();
    }

    public void send_dump() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("dump", TMessageType.CALL, ++seqid_));
      dump_args args = new dump_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_dump() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "dump failed: out of sequence response");
      }
      dump_result result = new dump_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void addScoreFunction(int functionIndex, String definition) throws IndextankException, TException
    {
      send_addScoreFunction(functionIndex, definition);
      recv_addScoreFunction();
    }

    public void send_addScoreFunction(int functionIndex, String definition) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addScoreFunction", TMessageType.CALL, ++seqid_));
      addScoreFunction_args args = new addScoreFunction_args();
      args.set_functionIndex(functionIndex);
      args.set_definition(definition);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addScoreFunction() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addScoreFunction failed: out of sequence response");
      }
      addScoreFunction_result result = new addScoreFunction_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public void removeScoreFunction(int functionIndex) throws IndextankException, TException
    {
      send_removeScoreFunction(functionIndex);
      recv_removeScoreFunction();
    }

    public void send_removeScoreFunction(int functionIndex) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeScoreFunction", TMessageType.CALL, ++seqid_));
      removeScoreFunction_args args = new removeScoreFunction_args();
      args.set_functionIndex(functionIndex);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeScoreFunction() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeScoreFunction failed: out of sequence response");
      }
      removeScoreFunction_result result = new removeScoreFunction_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public Map<Integer,String> listScoreFunctions() throws IndextankException, TException
    {
      send_listScoreFunctions();
      return recv_listScoreFunctions();
    }

    public void send_listScoreFunctions() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listScoreFunctions", TMessageType.CALL, ++seqid_));
      listScoreFunctions_args args = new listScoreFunctions_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<Integer,String> recv_listScoreFunctions() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listScoreFunctions failed: out of sequence response");
      }
      listScoreFunctions_result result = new listScoreFunctions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.ite != null) {
        throw result.ite;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listScoreFunctions failed: unknown result");
    }

    public IndexerStats stats() throws IndextankException, TException
    {
      send_stats();
      return recv_stats();
    }

    public void send_stats() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("stats", TMessageType.CALL, ++seqid_));
      stats_args args = new stats_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IndexerStats recv_stats() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "stats failed: out of sequence response");
      }
      stats_result result = new stats_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.ite != null) {
        throw result.ite;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "stats failed: unknown result");
    }

    public Map<String,String> get_stats() throws IndextankException, TException
    {
      send_get_stats();
      return recv_get_stats();
    }

    public void send_get_stats() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_stats", TMessageType.CALL, ++seqid_));
      get_stats_args args = new get_stats_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,String> recv_get_stats() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "get_stats failed: out of sequence response");
      }
      get_stats_result result = new get_stats_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      if (result.ite != null) {
        throw result.ite;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_stats failed: unknown result");
    }

    public void force_gc() throws IndextankException, TException
    {
      send_force_gc();
      recv_force_gc();
    }

    public void send_force_gc() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("force_gc", TMessageType.CALL, ++seqid_));
      force_gc_args args = new force_gc_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_force_gc() throws IndextankException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "force_gc failed: out of sequence response");
      }
      force_gc_result result = new force_gc_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ite != null) {
        throw result.ite;
      }
      return;
    }

    public IndexerStatus getStatus() throws TException
    {
      send_getStatus();
      return recv_getStatus();
    }

    public void send_getStatus() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getStatus", TMessageType.CALL, ++seqid_));
      getStatus_args args = new getStatus_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IndexerStatus recv_getStatus() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStatus failed: out of sequence response");
      }
      getStatus_result result = new getStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.is_set_success()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");
    }

    public void ping() throws TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("ping", TMessageType.CALL, ++seqid_));
      ping_args args = new ping_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_ping() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "ping failed: out of sequence response");
      }
      ping_result result = new ping_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void startFullRecovery() throws TException
    {
      send_startFullRecovery();
      recv_startFullRecovery();
    }

    public void send_startFullRecovery() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startFullRecovery", TMessageType.CALL, ++seqid_));
      startFullRecovery_args args = new startFullRecovery_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_startFullRecovery() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "startFullRecovery failed: out of sequence response");
      }
      startFullRecovery_result result = new startFullRecovery_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addDoc(String docid, Document doc, int timestamp_boost, Map<Integer,Double> boosts, AsyncMethodCallback<addDoc_call> resultHandler) throws TException {
      checkReady();
      addDoc_call method_call = new addDoc_call(docid, doc, timestamp_boost, boosts, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class addDoc_call extends TAsyncMethodCall {
      private String docid;
      private Document doc;
      private int timestamp_boost;
      private Map<Integer,Double> boosts;
      public addDoc_call(String docid, Document doc, int timestamp_boost, Map<Integer,Double> boosts, AsyncMethodCallback<addDoc_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docid = docid;
        this.doc = doc;
        this.timestamp_boost = timestamp_boost;
        this.boosts = boosts;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("addDoc", TMessageType.CALL, 0));
        addDoc_args args = new addDoc_args();
        args.set_docid(docid);
        args.set_doc(doc);
        args.set_timestamp_boost(timestamp_boost);
        args.set_boosts(boosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addDoc();
      }
    }

    public void updateTimestampBoost(String docid, int timestamp_boost, AsyncMethodCallback<updateTimestampBoost_call> resultHandler) throws TException {
      checkReady();
      updateTimestampBoost_call method_call = new updateTimestampBoost_call(docid, timestamp_boost, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class updateTimestampBoost_call extends TAsyncMethodCall {
      private String docid;
      private int timestamp_boost;
      public updateTimestampBoost_call(String docid, int timestamp_boost, AsyncMethodCallback<updateTimestampBoost_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docid = docid;
        this.timestamp_boost = timestamp_boost;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateTimestampBoost", TMessageType.CALL, 0));
        updateTimestampBoost_args args = new updateTimestampBoost_args();
        args.set_docid(docid);
        args.set_timestamp_boost(timestamp_boost);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateTimestampBoost();
      }
    }

    public void updateBoost(String docid, Map<Integer,Double> boosts, AsyncMethodCallback<updateBoost_call> resultHandler) throws TException {
      checkReady();
      updateBoost_call method_call = new updateBoost_call(docid, boosts, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class updateBoost_call extends TAsyncMethodCall {
      private String docid;
      private Map<Integer,Double> boosts;
      public updateBoost_call(String docid, Map<Integer,Double> boosts, AsyncMethodCallback<updateBoost_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docid = docid;
        this.boosts = boosts;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateBoost", TMessageType.CALL, 0));
        updateBoost_args args = new updateBoost_args();
        args.set_docid(docid);
        args.set_boosts(boosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateBoost();
      }
    }

    public void updateCategories(String docid, Map<String,String> categories, AsyncMethodCallback<updateCategories_call> resultHandler) throws TException {
      checkReady();
      updateCategories_call method_call = new updateCategories_call(docid, categories, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class updateCategories_call extends TAsyncMethodCall {
      private String docid;
      private Map<String,String> categories;
      public updateCategories_call(String docid, Map<String,String> categories, AsyncMethodCallback<updateCategories_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docid = docid;
        this.categories = categories;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("updateCategories", TMessageType.CALL, 0));
        updateCategories_args args = new updateCategories_args();
        args.set_docid(docid);
        args.set_categories(categories);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateCategories();
      }
    }

    public void delDoc(String docid, AsyncMethodCallback<delDoc_call> resultHandler) throws TException {
      checkReady();
      delDoc_call method_call = new delDoc_call(docid, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class delDoc_call extends TAsyncMethodCall {
      private String docid;
      public delDoc_call(String docid, AsyncMethodCallback<delDoc_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docid = docid;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("delDoc", TMessageType.CALL, 0));
        delDoc_args args = new delDoc_args();
        args.set_docid(docid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_delDoc();
      }
    }

    public void promoteResult(String docid, String query, AsyncMethodCallback<promoteResult_call> resultHandler) throws TException {
      checkReady();
      promoteResult_call method_call = new promoteResult_call(docid, query, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class promoteResult_call extends TAsyncMethodCall {
      private String docid;
      private String query;
      public promoteResult_call(String docid, String query, AsyncMethodCallback<promoteResult_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docid = docid;
        this.query = query;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("promoteResult", TMessageType.CALL, 0));
        promoteResult_args args = new promoteResult_args();
        args.set_docid(docid);
        args.set_query(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_promoteResult();
      }
    }

    public void dump(AsyncMethodCallback<dump_call> resultHandler) throws TException {
      checkReady();
      dump_call method_call = new dump_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class dump_call extends TAsyncMethodCall {
      public dump_call(AsyncMethodCallback<dump_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("dump", TMessageType.CALL, 0));
        dump_args args = new dump_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_dump();
      }
    }

    public void addScoreFunction(int functionIndex, String definition, AsyncMethodCallback<addScoreFunction_call> resultHandler) throws TException {
      checkReady();
      addScoreFunction_call method_call = new addScoreFunction_call(functionIndex, definition, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class addScoreFunction_call extends TAsyncMethodCall {
      private int functionIndex;
      private String definition;
      public addScoreFunction_call(int functionIndex, String definition, AsyncMethodCallback<addScoreFunction_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.functionIndex = functionIndex;
        this.definition = definition;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("addScoreFunction", TMessageType.CALL, 0));
        addScoreFunction_args args = new addScoreFunction_args();
        args.set_functionIndex(functionIndex);
        args.set_definition(definition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addScoreFunction();
      }
    }

    public void removeScoreFunction(int functionIndex, AsyncMethodCallback<removeScoreFunction_call> resultHandler) throws TException {
      checkReady();
      removeScoreFunction_call method_call = new removeScoreFunction_call(functionIndex, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class removeScoreFunction_call extends TAsyncMethodCall {
      private int functionIndex;
      public removeScoreFunction_call(int functionIndex, AsyncMethodCallback<removeScoreFunction_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.functionIndex = functionIndex;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("removeScoreFunction", TMessageType.CALL, 0));
        removeScoreFunction_args args = new removeScoreFunction_args();
        args.set_functionIndex(functionIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeScoreFunction();
      }
    }

    public void listScoreFunctions(AsyncMethodCallback<listScoreFunctions_call> resultHandler) throws TException {
      checkReady();
      listScoreFunctions_call method_call = new listScoreFunctions_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class listScoreFunctions_call extends TAsyncMethodCall {
      public listScoreFunctions_call(AsyncMethodCallback<listScoreFunctions_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("listScoreFunctions", TMessageType.CALL, 0));
        listScoreFunctions_args args = new listScoreFunctions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,String> getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listScoreFunctions();
      }
    }

    public void stats(AsyncMethodCallback<stats_call> resultHandler) throws TException {
      checkReady();
      stats_call method_call = new stats_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class stats_call extends TAsyncMethodCall {
      public stats_call(AsyncMethodCallback<stats_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("stats", TMessageType.CALL, 0));
        stats_args args = new stats_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IndexerStats getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stats();
      }
    }

    public void get_stats(AsyncMethodCallback<get_stats_call> resultHandler) throws TException {
      checkReady();
      get_stats_call method_call = new get_stats_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class get_stats_call extends TAsyncMethodCall {
      public get_stats_call(AsyncMethodCallback<get_stats_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("get_stats", TMessageType.CALL, 0));
        get_stats_args args = new get_stats_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_stats();
      }
    }

    public void force_gc(AsyncMethodCallback<force_gc_call> resultHandler) throws TException {
      checkReady();
      force_gc_call method_call = new force_gc_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class force_gc_call extends TAsyncMethodCall {
      public force_gc_call(AsyncMethodCallback<force_gc_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("force_gc", TMessageType.CALL, 0));
        force_gc_args args = new force_gc_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IndextankException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_force_gc();
      }
    }

    public void getStatus(AsyncMethodCallback<getStatus_call> resultHandler) throws TException {
      checkReady();
      getStatus_call method_call = new getStatus_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getStatus_call extends TAsyncMethodCall {
      public getStatus_call(AsyncMethodCallback<getStatus_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getStatus", TMessageType.CALL, 0));
        getStatus_args args = new getStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IndexerStatus getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatus();
      }
    }

    public void ping(AsyncMethodCallback<ping_call> resultHandler) throws TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class ping_call extends TAsyncMethodCall {
      public ping_call(AsyncMethodCallback<ping_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void startFullRecovery(AsyncMethodCallback<startFullRecovery_call> resultHandler) throws TException {
      checkReady();
      startFullRecovery_call method_call = new startFullRecovery_call(resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class startFullRecovery_call extends TAsyncMethodCall {
      public startFullRecovery_call(AsyncMethodCallback<startFullRecovery_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("startFullRecovery", TMessageType.CALL, 0));
        startFullRecovery_args args = new startFullRecovery_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_startFullRecovery();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("addDoc", new addDoc());
      processMap_.put("updateTimestampBoost", new updateTimestampBoost());
      processMap_.put("updateBoost", new updateBoost());
      processMap_.put("updateCategories", new updateCategories());
      processMap_.put("delDoc", new delDoc());
      processMap_.put("promoteResult", new promoteResult());
      processMap_.put("dump", new dump());
      processMap_.put("addScoreFunction", new addScoreFunction());
      processMap_.put("removeScoreFunction", new removeScoreFunction());
      processMap_.put("listScoreFunctions", new listScoreFunctions());
      processMap_.put("stats", new stats());
      processMap_.put("get_stats", new get_stats());
      processMap_.put("force_gc", new force_gc());
      processMap_.put("getStatus", new getStatus());
      processMap_.put("ping", new ping());
      processMap_.put("startFullRecovery", new startFullRecovery());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class addDoc implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addDoc_args args = new addDoc_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addDoc", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addDoc_result result = new addDoc_result();
        try {
          iface_.addDoc(args.docid, args.doc, args.timestamp_boost, args.boosts);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing addDoc", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addDoc");
          oprot.writeMessageBegin(new TMessage("addDoc", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addDoc", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateTimestampBoost implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateTimestampBoost_args args = new updateTimestampBoost_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateTimestampBoost", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateTimestampBoost_result result = new updateTimestampBoost_result();
        try {
          iface_.updateTimestampBoost(args.docid, args.timestamp_boost);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing updateTimestampBoost", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateTimestampBoost");
          oprot.writeMessageBegin(new TMessage("updateTimestampBoost", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateTimestampBoost", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBoost implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBoost_args args = new updateBoost_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBoost", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBoost_result result = new updateBoost_result();
        try {
          iface_.updateBoost(args.docid, args.boosts);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing updateBoost", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBoost");
          oprot.writeMessageBegin(new TMessage("updateBoost", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBoost", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateCategories implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateCategories_args args = new updateCategories_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateCategories", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateCategories_result result = new updateCategories_result();
        try {
          iface_.updateCategories(args.docid, args.categories);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing updateCategories", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateCategories");
          oprot.writeMessageBegin(new TMessage("updateCategories", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateCategories", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class delDoc implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        delDoc_args args = new delDoc_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("delDoc", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        delDoc_result result = new delDoc_result();
        try {
          iface_.delDoc(args.docid);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing delDoc", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing delDoc");
          oprot.writeMessageBegin(new TMessage("delDoc", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("delDoc", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class promoteResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        promoteResult_args args = new promoteResult_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("promoteResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        promoteResult_result result = new promoteResult_result();
        try {
          iface_.promoteResult(args.docid, args.query);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing promoteResult", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing promoteResult");
          oprot.writeMessageBegin(new TMessage("promoteResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("promoteResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class dump implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        dump_args args = new dump_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("dump", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        dump_result result = new dump_result();
        try {
          iface_.dump();
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing dump", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing dump");
          oprot.writeMessageBegin(new TMessage("dump", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("dump", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addScoreFunction implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addScoreFunction_args args = new addScoreFunction_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addScoreFunction", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addScoreFunction_result result = new addScoreFunction_result();
        try {
          iface_.addScoreFunction(args.functionIndex, args.definition);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing addScoreFunction", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addScoreFunction");
          oprot.writeMessageBegin(new TMessage("addScoreFunction", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addScoreFunction", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeScoreFunction implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeScoreFunction_args args = new removeScoreFunction_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeScoreFunction", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeScoreFunction_result result = new removeScoreFunction_result();
        try {
          iface_.removeScoreFunction(args.functionIndex);
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing removeScoreFunction", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeScoreFunction");
          oprot.writeMessageBegin(new TMessage("removeScoreFunction", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeScoreFunction", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listScoreFunctions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listScoreFunctions_args args = new listScoreFunctions_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listScoreFunctions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listScoreFunctions_result result = new listScoreFunctions_result();
        try {
          result.success = iface_.listScoreFunctions();
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing listScoreFunctions", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listScoreFunctions");
          oprot.writeMessageBegin(new TMessage("listScoreFunctions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listScoreFunctions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class stats implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        stats_args args = new stats_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("stats", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        stats_result result = new stats_result();
        try {
          result.success = iface_.stats();
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing stats", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing stats");
          oprot.writeMessageBegin(new TMessage("stats", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("stats", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_stats implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_stats_args args = new get_stats_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("get_stats", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_stats_result result = new get_stats_result();
        try {
          result.success = iface_.get_stats();
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_stats", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_stats");
          oprot.writeMessageBegin(new TMessage("get_stats", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("get_stats", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class force_gc implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        force_gc_args args = new force_gc_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("force_gc", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        force_gc_result result = new force_gc_result();
        try {
          iface_.force_gc();
        } catch (IndextankException ite) {
          result.ite = ite;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing force_gc", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing force_gc");
          oprot.writeMessageBegin(new TMessage("force_gc", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("force_gc", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getStatus_args args = new getStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getStatus_result result = new getStatus_result();
        result.success = iface_.getStatus();
        oprot.writeMessageBegin(new TMessage("getStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class ping implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        ping_args args = new ping_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        ping_result result = new ping_result();
        iface_.ping();
        oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class startFullRecovery implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startFullRecovery_args args = new startFullRecovery_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("startFullRecovery", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        startFullRecovery_result result = new startFullRecovery_result();
        iface_.startFullRecovery();
        oprot.writeMessageBegin(new TMessage("startFullRecovery", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class addDoc_args implements TBase<addDoc_args, addDoc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addDoc_args");

    private static final TField DOCID_FIELD_DESC = new TField("docid", TType.STRING, (short)1);
    private static final TField DOC_FIELD_DESC = new TField("doc", TType.STRUCT, (short)2);
    private static final TField TIMESTAMP_BOOST_FIELD_DESC = new TField("timestamp_boost", TType.I32, (short)3);
    private static final TField BOOSTS_FIELD_DESC = new TField("boosts", TType.MAP, (short)4);

    private String docid;
    private Document doc;
    private int timestamp_boost;
    private Map<Integer,Double> boosts;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOCID((short)1, "docid"),
      DOC((short)2, "doc"),
      TIMESTAMP_BOOST((short)3, "timestamp_boost"),
      BOOSTS((short)4, "boosts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCID
            return DOCID;
          case 2: // DOC
            return DOC;
          case 3: // TIMESTAMP_BOOST
            return TIMESTAMP_BOOST;
          case 4: // BOOSTS
            return BOOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_BOOST_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCID, new FieldMetaData("docid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.DOC, new FieldMetaData("doc", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Document.class)));
      tmpMap.put(_Fields.TIMESTAMP_BOOST, new FieldMetaData("timestamp_boost", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.BOOSTS, new FieldMetaData("boosts", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addDoc_args.class, metaDataMap);
    }

    public addDoc_args() {
    }

    public addDoc_args(
      String docid,
      Document doc,
      int timestamp_boost,
      Map<Integer,Double> boosts)
    {
      this();
      this.docid = docid;
      this.doc = doc;
      this.timestamp_boost = timestamp_boost;
      set_timestamp_boost_isSet(true);
      this.boosts = boosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDoc_args(addDoc_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_docid()) {
        this.docid = other.docid;
      }
      if (other.is_set_doc()) {
        this.doc = new Document(other.doc);
      }
      this.timestamp_boost = other.timestamp_boost;
      if (other.is_set_boosts()) {
        Map<Integer,Double> __this__boosts = new HashMap<Integer,Double>();
        for (Map.Entry<Integer, Double> other_element : other.boosts.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          Integer __this__boosts_copy_key = other_element_key;

          Double __this__boosts_copy_value = other_element_value;

          __this__boosts.put(__this__boosts_copy_key, __this__boosts_copy_value);
        }
        this.boosts = __this__boosts;
      }
    }

    public addDoc_args deepCopy() {
      return new addDoc_args(this);
    }

    @Override
    public void clear() {
      this.docid = null;
      this.doc = null;
      set_timestamp_boost_isSet(false);
      this.timestamp_boost = 0;
      this.boosts = null;
    }

    public String get_docid() {
      return this.docid;
    }

    public addDoc_args set_docid(String docid) {
      this.docid = docid;
      return this;
    }

    public void unset_docid() {
      this.docid = null;
    }

    /** Returns true if field docid is set (has been asigned a value) and false otherwise */
    public boolean is_set_docid() {
      return this.docid != null;
    }

    public void set_docid_isSet(boolean value) {
      if (!value) {
        this.docid = null;
      }
    }

    public Document get_doc() {
      return this.doc;
    }

    public addDoc_args set_doc(Document doc) {
      this.doc = doc;
      return this;
    }

    public void unset_doc() {
      this.doc = null;
    }

    /** Returns true if field doc is set (has been asigned a value) and false otherwise */
    public boolean is_set_doc() {
      return this.doc != null;
    }

    public void set_doc_isSet(boolean value) {
      if (!value) {
        this.doc = null;
      }
    }

    public int get_timestamp_boost() {
      return this.timestamp_boost;
    }

    public addDoc_args set_timestamp_boost(int timestamp_boost) {
      this.timestamp_boost = timestamp_boost;
      set_timestamp_boost_isSet(true);
      return this;
    }

    public void unset_timestamp_boost() {
      __isset_bit_vector.clear(__TIMESTAMP_BOOST_ISSET_ID);
    }

    /** Returns true if field timestamp_boost is set (has been asigned a value) and false otherwise */
    public boolean is_set_timestamp_boost() {
      return __isset_bit_vector.get(__TIMESTAMP_BOOST_ISSET_ID);
    }

    public void set_timestamp_boost_isSet(boolean value) {
      __isset_bit_vector.set(__TIMESTAMP_BOOST_ISSET_ID, value);
    }

    public int get_boosts_size() {
      return (this.boosts == null) ? 0 : this.boosts.size();
    }

    public void put_to_boosts(int key, double val) {
      if (this.boosts == null) {
        this.boosts = new HashMap<Integer,Double>();
      }
      this.boosts.put(key, val);
    }

    public Map<Integer,Double> get_boosts() {
      return this.boosts;
    }

    public addDoc_args set_boosts(Map<Integer,Double> boosts) {
      this.boosts = boosts;
      return this;
    }

    public void unset_boosts() {
      this.boosts = null;
    }

    /** Returns true if field boosts is set (has been asigned a value) and false otherwise */
    public boolean is_set_boosts() {
      return this.boosts != null;
    }

    public void set_boosts_isSet(boolean value) {
      if (!value) {
        this.boosts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCID:
        if (value == null) {
          unset_docid();
        } else {
          set_docid((String)value);
        }
        break;

      case DOC:
        if (value == null) {
          unset_doc();
        } else {
          set_doc((Document)value);
        }
        break;

      case TIMESTAMP_BOOST:
        if (value == null) {
          unset_timestamp_boost();
        } else {
          set_timestamp_boost((Integer)value);
        }
        break;

      case BOOSTS:
        if (value == null) {
          unset_boosts();
        } else {
          set_boosts((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCID:
        return get_docid();

      case DOC:
        return get_doc();

      case TIMESTAMP_BOOST:
        return new Integer(get_timestamp_boost());

      case BOOSTS:
        return get_boosts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCID:
        return is_set_docid();
      case DOC:
        return is_set_doc();
      case TIMESTAMP_BOOST:
        return is_set_timestamp_boost();
      case BOOSTS:
        return is_set_boosts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDoc_args)
        return this.equals((addDoc_args)that);
      return false;
    }

    public boolean equals(addDoc_args that) {
      if (that == null)
        return false;

      boolean this_present_docid = true && this.is_set_docid();
      boolean that_present_docid = true && that.is_set_docid();
      if (this_present_docid || that_present_docid) {
        if (!(this_present_docid && that_present_docid))
          return false;
        if (!this.docid.equals(that.docid))
          return false;
      }

      boolean this_present_doc = true && this.is_set_doc();
      boolean that_present_doc = true && that.is_set_doc();
      if (this_present_doc || that_present_doc) {
        if (!(this_present_doc && that_present_doc))
          return false;
        if (!this.doc.equals(that.doc))
          return false;
      }

      boolean this_present_timestamp_boost = true;
      boolean that_present_timestamp_boost = true;
      if (this_present_timestamp_boost || that_present_timestamp_boost) {
        if (!(this_present_timestamp_boost && that_present_timestamp_boost))
          return false;
        if (this.timestamp_boost != that.timestamp_boost)
          return false;
      }

      boolean this_present_boosts = true && this.is_set_boosts();
      boolean that_present_boosts = true && that.is_set_boosts();
      if (this_present_boosts || that_present_boosts) {
        if (!(this_present_boosts && that_present_boosts))
          return false;
        if (!this.boosts.equals(that.boosts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addDoc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addDoc_args typedOther = (addDoc_args)other;

      lastComparison = Boolean.valueOf(is_set_docid()).compareTo(typedOther.is_set_docid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_docid()) {
        lastComparison = TBaseHelper.compareTo(this.docid, typedOther.docid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_doc()).compareTo(typedOther.is_set_doc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_doc()) {
        lastComparison = TBaseHelper.compareTo(this.doc, typedOther.doc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_timestamp_boost()).compareTo(typedOther.is_set_timestamp_boost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_timestamp_boost()) {
        lastComparison = TBaseHelper.compareTo(this.timestamp_boost, typedOther.timestamp_boost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_boosts()).compareTo(typedOther.is_set_boosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_boosts()) {
        lastComparison = TBaseHelper.compareTo(this.boosts, typedOther.boosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCID
            if (field.type == TType.STRING) {
              this.docid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // DOC
            if (field.type == TType.STRUCT) {
              this.doc = new Document();
              this.doc.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TIMESTAMP_BOOST
            if (field.type == TType.I32) {
              this.timestamp_boost = iprot.readI32();
              set_timestamp_boost_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // BOOSTS
            if (field.type == TType.MAP) {
              {
                TMap _map116 = iprot.readMapBegin();
                this.boosts = new HashMap<Integer,Double>(2*_map116.size);
                for (int _i117 = 0; _i117 < _map116.size; ++_i117)
                {
                  int _key118;
                  double _val119;
                  _key118 = iprot.readI32();
                  _val119 = iprot.readDouble();
                  this.boosts.put(_key118, _val119);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.docid != null) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeString(this.docid);
        oprot.writeFieldEnd();
      }
      if (this.doc != null) {
        oprot.writeFieldBegin(DOC_FIELD_DESC);
        this.doc.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_BOOST_FIELD_DESC);
      oprot.writeI32(this.timestamp_boost);
      oprot.writeFieldEnd();
      if (this.boosts != null) {
        oprot.writeFieldBegin(BOOSTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.DOUBLE, this.boosts.size()));
          for (Map.Entry<Integer, Double> _iter120 : this.boosts.entrySet())
          {
            oprot.writeI32(_iter120.getKey());
            oprot.writeDouble(_iter120.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDoc_args(");
      boolean first = true;

      sb.append("docid:");
      if (this.docid == null) {
        sb.append("null");
      } else {
        sb.append(this.docid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doc:");
      if (this.doc == null) {
        sb.append("null");
      } else {
        sb.append(this.doc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp_boost:");
      sb.append(this.timestamp_boost);
      first = false;
      if (!first) sb.append(", ");
      sb.append("boosts:");
      if (this.boosts == null) {
        sb.append("null");
      } else {
        sb.append(this.boosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addDoc_result implements TBase<addDoc_result, addDoc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addDoc_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addDoc_result.class, metaDataMap);
    }

    public addDoc_result() {
    }

    public addDoc_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDoc_result(addDoc_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public addDoc_result deepCopy() {
      return new addDoc_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public addDoc_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDoc_result)
        return this.equals((addDoc_result)that);
      return false;
    }

    public boolean equals(addDoc_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addDoc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addDoc_result typedOther = (addDoc_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDoc_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTimestampBoost_args implements TBase<updateTimestampBoost_args, updateTimestampBoost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTimestampBoost_args");

    private static final TField DOCID_FIELD_DESC = new TField("docid", TType.STRING, (short)1);
    private static final TField TIMESTAMP_BOOST_FIELD_DESC = new TField("timestamp_boost", TType.I32, (short)2);

    private String docid;
    private int timestamp_boost;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOCID((short)1, "docid"),
      TIMESTAMP_BOOST((short)2, "timestamp_boost");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCID
            return DOCID;
          case 2: // TIMESTAMP_BOOST
            return TIMESTAMP_BOOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_BOOST_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCID, new FieldMetaData("docid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP_BOOST, new FieldMetaData("timestamp_boost", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateTimestampBoost_args.class, metaDataMap);
    }

    public updateTimestampBoost_args() {
    }

    public updateTimestampBoost_args(
      String docid,
      int timestamp_boost)
    {
      this();
      this.docid = docid;
      this.timestamp_boost = timestamp_boost;
      set_timestamp_boost_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTimestampBoost_args(updateTimestampBoost_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.is_set_docid()) {
        this.docid = other.docid;
      }
      this.timestamp_boost = other.timestamp_boost;
    }

    public updateTimestampBoost_args deepCopy() {
      return new updateTimestampBoost_args(this);
    }

    @Override
    public void clear() {
      this.docid = null;
      set_timestamp_boost_isSet(false);
      this.timestamp_boost = 0;
    }

    public String get_docid() {
      return this.docid;
    }

    public updateTimestampBoost_args set_docid(String docid) {
      this.docid = docid;
      return this;
    }

    public void unset_docid() {
      this.docid = null;
    }

    /** Returns true if field docid is set (has been asigned a value) and false otherwise */
    public boolean is_set_docid() {
      return this.docid != null;
    }

    public void set_docid_isSet(boolean value) {
      if (!value) {
        this.docid = null;
      }
    }

    public int get_timestamp_boost() {
      return this.timestamp_boost;
    }

    public updateTimestampBoost_args set_timestamp_boost(int timestamp_boost) {
      this.timestamp_boost = timestamp_boost;
      set_timestamp_boost_isSet(true);
      return this;
    }

    public void unset_timestamp_boost() {
      __isset_bit_vector.clear(__TIMESTAMP_BOOST_ISSET_ID);
    }

    /** Returns true if field timestamp_boost is set (has been asigned a value) and false otherwise */
    public boolean is_set_timestamp_boost() {
      return __isset_bit_vector.get(__TIMESTAMP_BOOST_ISSET_ID);
    }

    public void set_timestamp_boost_isSet(boolean value) {
      __isset_bit_vector.set(__TIMESTAMP_BOOST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCID:
        if (value == null) {
          unset_docid();
        } else {
          set_docid((String)value);
        }
        break;

      case TIMESTAMP_BOOST:
        if (value == null) {
          unset_timestamp_boost();
        } else {
          set_timestamp_boost((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCID:
        return get_docid();

      case TIMESTAMP_BOOST:
        return new Integer(get_timestamp_boost());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCID:
        return is_set_docid();
      case TIMESTAMP_BOOST:
        return is_set_timestamp_boost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTimestampBoost_args)
        return this.equals((updateTimestampBoost_args)that);
      return false;
    }

    public boolean equals(updateTimestampBoost_args that) {
      if (that == null)
        return false;

      boolean this_present_docid = true && this.is_set_docid();
      boolean that_present_docid = true && that.is_set_docid();
      if (this_present_docid || that_present_docid) {
        if (!(this_present_docid && that_present_docid))
          return false;
        if (!this.docid.equals(that.docid))
          return false;
      }

      boolean this_present_timestamp_boost = true;
      boolean that_present_timestamp_boost = true;
      if (this_present_timestamp_boost || that_present_timestamp_boost) {
        if (!(this_present_timestamp_boost && that_present_timestamp_boost))
          return false;
        if (this.timestamp_boost != that.timestamp_boost)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTimestampBoost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTimestampBoost_args typedOther = (updateTimestampBoost_args)other;

      lastComparison = Boolean.valueOf(is_set_docid()).compareTo(typedOther.is_set_docid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_docid()) {
        lastComparison = TBaseHelper.compareTo(this.docid, typedOther.docid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_timestamp_boost()).compareTo(typedOther.is_set_timestamp_boost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_timestamp_boost()) {
        lastComparison = TBaseHelper.compareTo(this.timestamp_boost, typedOther.timestamp_boost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCID
            if (field.type == TType.STRING) {
              this.docid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMESTAMP_BOOST
            if (field.type == TType.I32) {
              this.timestamp_boost = iprot.readI32();
              set_timestamp_boost_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.docid != null) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeString(this.docid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_BOOST_FIELD_DESC);
      oprot.writeI32(this.timestamp_boost);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTimestampBoost_args(");
      boolean first = true;

      sb.append("docid:");
      if (this.docid == null) {
        sb.append("null");
      } else {
        sb.append(this.docid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp_boost:");
      sb.append(this.timestamp_boost);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTimestampBoost_result implements TBase<updateTimestampBoost_result, updateTimestampBoost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTimestampBoost_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateTimestampBoost_result.class, metaDataMap);
    }

    public updateTimestampBoost_result() {
    }

    public updateTimestampBoost_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTimestampBoost_result(updateTimestampBoost_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public updateTimestampBoost_result deepCopy() {
      return new updateTimestampBoost_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public updateTimestampBoost_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTimestampBoost_result)
        return this.equals((updateTimestampBoost_result)that);
      return false;
    }

    public boolean equals(updateTimestampBoost_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateTimestampBoost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateTimestampBoost_result typedOther = (updateTimestampBoost_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTimestampBoost_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBoost_args implements TBase<updateBoost_args, updateBoost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBoost_args");

    private static final TField DOCID_FIELD_DESC = new TField("docid", TType.STRING, (short)1);
    private static final TField BOOSTS_FIELD_DESC = new TField("boosts", TType.MAP, (short)2);

    private String docid;
    private Map<Integer,Double> boosts;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOCID((short)1, "docid"),
      BOOSTS((short)2, "boosts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCID
            return DOCID;
          case 2: // BOOSTS
            return BOOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCID, new FieldMetaData("docid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.BOOSTS, new FieldMetaData("boosts", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateBoost_args.class, metaDataMap);
    }

    public updateBoost_args() {
    }

    public updateBoost_args(
      String docid,
      Map<Integer,Double> boosts)
    {
      this();
      this.docid = docid;
      this.boosts = boosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBoost_args(updateBoost_args other) {
      if (other.is_set_docid()) {
        this.docid = other.docid;
      }
      if (other.is_set_boosts()) {
        Map<Integer,Double> __this__boosts = new HashMap<Integer,Double>();
        for (Map.Entry<Integer, Double> other_element : other.boosts.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          Integer __this__boosts_copy_key = other_element_key;

          Double __this__boosts_copy_value = other_element_value;

          __this__boosts.put(__this__boosts_copy_key, __this__boosts_copy_value);
        }
        this.boosts = __this__boosts;
      }
    }

    public updateBoost_args deepCopy() {
      return new updateBoost_args(this);
    }

    @Override
    public void clear() {
      this.docid = null;
      this.boosts = null;
    }

    public String get_docid() {
      return this.docid;
    }

    public updateBoost_args set_docid(String docid) {
      this.docid = docid;
      return this;
    }

    public void unset_docid() {
      this.docid = null;
    }

    /** Returns true if field docid is set (has been asigned a value) and false otherwise */
    public boolean is_set_docid() {
      return this.docid != null;
    }

    public void set_docid_isSet(boolean value) {
      if (!value) {
        this.docid = null;
      }
    }

    public int get_boosts_size() {
      return (this.boosts == null) ? 0 : this.boosts.size();
    }

    public void put_to_boosts(int key, double val) {
      if (this.boosts == null) {
        this.boosts = new HashMap<Integer,Double>();
      }
      this.boosts.put(key, val);
    }

    public Map<Integer,Double> get_boosts() {
      return this.boosts;
    }

    public updateBoost_args set_boosts(Map<Integer,Double> boosts) {
      this.boosts = boosts;
      return this;
    }

    public void unset_boosts() {
      this.boosts = null;
    }

    /** Returns true if field boosts is set (has been asigned a value) and false otherwise */
    public boolean is_set_boosts() {
      return this.boosts != null;
    }

    public void set_boosts_isSet(boolean value) {
      if (!value) {
        this.boosts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCID:
        if (value == null) {
          unset_docid();
        } else {
          set_docid((String)value);
        }
        break;

      case BOOSTS:
        if (value == null) {
          unset_boosts();
        } else {
          set_boosts((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCID:
        return get_docid();

      case BOOSTS:
        return get_boosts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCID:
        return is_set_docid();
      case BOOSTS:
        return is_set_boosts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBoost_args)
        return this.equals((updateBoost_args)that);
      return false;
    }

    public boolean equals(updateBoost_args that) {
      if (that == null)
        return false;

      boolean this_present_docid = true && this.is_set_docid();
      boolean that_present_docid = true && that.is_set_docid();
      if (this_present_docid || that_present_docid) {
        if (!(this_present_docid && that_present_docid))
          return false;
        if (!this.docid.equals(that.docid))
          return false;
      }

      boolean this_present_boosts = true && this.is_set_boosts();
      boolean that_present_boosts = true && that.is_set_boosts();
      if (this_present_boosts || that_present_boosts) {
        if (!(this_present_boosts && that_present_boosts))
          return false;
        if (!this.boosts.equals(that.boosts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateBoost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateBoost_args typedOther = (updateBoost_args)other;

      lastComparison = Boolean.valueOf(is_set_docid()).compareTo(typedOther.is_set_docid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_docid()) {
        lastComparison = TBaseHelper.compareTo(this.docid, typedOther.docid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_boosts()).compareTo(typedOther.is_set_boosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_boosts()) {
        lastComparison = TBaseHelper.compareTo(this.boosts, typedOther.boosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCID
            if (field.type == TType.STRING) {
              this.docid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // BOOSTS
            if (field.type == TType.MAP) {
              {
                TMap _map121 = iprot.readMapBegin();
                this.boosts = new HashMap<Integer,Double>(2*_map121.size);
                for (int _i122 = 0; _i122 < _map121.size; ++_i122)
                {
                  int _key123;
                  double _val124;
                  _key123 = iprot.readI32();
                  _val124 = iprot.readDouble();
                  this.boosts.put(_key123, _val124);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.docid != null) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeString(this.docid);
        oprot.writeFieldEnd();
      }
      if (this.boosts != null) {
        oprot.writeFieldBegin(BOOSTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.DOUBLE, this.boosts.size()));
          for (Map.Entry<Integer, Double> _iter125 : this.boosts.entrySet())
          {
            oprot.writeI32(_iter125.getKey());
            oprot.writeDouble(_iter125.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBoost_args(");
      boolean first = true;

      sb.append("docid:");
      if (this.docid == null) {
        sb.append("null");
      } else {
        sb.append(this.docid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("boosts:");
      if (this.boosts == null) {
        sb.append("null");
      } else {
        sb.append(this.boosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBoost_result implements TBase<updateBoost_result, updateBoost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBoost_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateBoost_result.class, metaDataMap);
    }

    public updateBoost_result() {
    }

    public updateBoost_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBoost_result(updateBoost_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public updateBoost_result deepCopy() {
      return new updateBoost_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public updateBoost_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBoost_result)
        return this.equals((updateBoost_result)that);
      return false;
    }

    public boolean equals(updateBoost_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateBoost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateBoost_result typedOther = (updateBoost_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBoost_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateCategories_args implements TBase<updateCategories_args, updateCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateCategories_args");

    private static final TField DOCID_FIELD_DESC = new TField("docid", TType.STRING, (short)1);
    private static final TField CATEGORIES_FIELD_DESC = new TField("categories", TType.MAP, (short)2);

    private String docid;
    private Map<String,String> categories;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOCID((short)1, "docid"),
      CATEGORIES((short)2, "categories");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCID
            return DOCID;
          case 2: // CATEGORIES
            return CATEGORIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCID, new FieldMetaData("docid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.CATEGORIES, new FieldMetaData("categories", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateCategories_args.class, metaDataMap);
    }

    public updateCategories_args() {
    }

    public updateCategories_args(
      String docid,
      Map<String,String> categories)
    {
      this();
      this.docid = docid;
      this.categories = categories;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCategories_args(updateCategories_args other) {
      if (other.is_set_docid()) {
        this.docid = other.docid;
      }
      if (other.is_set_categories()) {
        Map<String,String> __this__categories = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.categories.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__categories_copy_key = other_element_key;

          String __this__categories_copy_value = other_element_value;

          __this__categories.put(__this__categories_copy_key, __this__categories_copy_value);
        }
        this.categories = __this__categories;
      }
    }

    public updateCategories_args deepCopy() {
      return new updateCategories_args(this);
    }

    @Override
    public void clear() {
      this.docid = null;
      this.categories = null;
    }

    public String get_docid() {
      return this.docid;
    }

    public updateCategories_args set_docid(String docid) {
      this.docid = docid;
      return this;
    }

    public void unset_docid() {
      this.docid = null;
    }

    /** Returns true if field docid is set (has been asigned a value) and false otherwise */
    public boolean is_set_docid() {
      return this.docid != null;
    }

    public void set_docid_isSet(boolean value) {
      if (!value) {
        this.docid = null;
      }
    }

    public int get_categories_size() {
      return (this.categories == null) ? 0 : this.categories.size();
    }

    public void put_to_categories(String key, String val) {
      if (this.categories == null) {
        this.categories = new HashMap<String,String>();
      }
      this.categories.put(key, val);
    }

    public Map<String,String> get_categories() {
      return this.categories;
    }

    public updateCategories_args set_categories(Map<String,String> categories) {
      this.categories = categories;
      return this;
    }

    public void unset_categories() {
      this.categories = null;
    }

    /** Returns true if field categories is set (has been asigned a value) and false otherwise */
    public boolean is_set_categories() {
      return this.categories != null;
    }

    public void set_categories_isSet(boolean value) {
      if (!value) {
        this.categories = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCID:
        if (value == null) {
          unset_docid();
        } else {
          set_docid((String)value);
        }
        break;

      case CATEGORIES:
        if (value == null) {
          unset_categories();
        } else {
          set_categories((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCID:
        return get_docid();

      case CATEGORIES:
        return get_categories();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCID:
        return is_set_docid();
      case CATEGORIES:
        return is_set_categories();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCategories_args)
        return this.equals((updateCategories_args)that);
      return false;
    }

    public boolean equals(updateCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_docid = true && this.is_set_docid();
      boolean that_present_docid = true && that.is_set_docid();
      if (this_present_docid || that_present_docid) {
        if (!(this_present_docid && that_present_docid))
          return false;
        if (!this.docid.equals(that.docid))
          return false;
      }

      boolean this_present_categories = true && this.is_set_categories();
      boolean that_present_categories = true && that.is_set_categories();
      if (this_present_categories || that_present_categories) {
        if (!(this_present_categories && that_present_categories))
          return false;
        if (!this.categories.equals(that.categories))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCategories_args typedOther = (updateCategories_args)other;

      lastComparison = Boolean.valueOf(is_set_docid()).compareTo(typedOther.is_set_docid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_docid()) {
        lastComparison = TBaseHelper.compareTo(this.docid, typedOther.docid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_categories()).compareTo(typedOther.is_set_categories());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_categories()) {
        lastComparison = TBaseHelper.compareTo(this.categories, typedOther.categories);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCID
            if (field.type == TType.STRING) {
              this.docid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CATEGORIES
            if (field.type == TType.MAP) {
              {
                TMap _map126 = iprot.readMapBegin();
                this.categories = new HashMap<String,String>(2*_map126.size);
                for (int _i127 = 0; _i127 < _map126.size; ++_i127)
                {
                  String _key128;
                  String _val129;
                  _key128 = iprot.readString();
                  _val129 = iprot.readString();
                  this.categories.put(_key128, _val129);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.docid != null) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeString(this.docid);
        oprot.writeFieldEnd();
      }
      if (this.categories != null) {
        oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.categories.size()));
          for (Map.Entry<String, String> _iter130 : this.categories.entrySet())
          {
            oprot.writeString(_iter130.getKey());
            oprot.writeString(_iter130.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCategories_args(");
      boolean first = true;

      sb.append("docid:");
      if (this.docid == null) {
        sb.append("null");
      } else {
        sb.append(this.docid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categories:");
      if (this.categories == null) {
        sb.append("null");
      } else {
        sb.append(this.categories);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateCategories_result implements TBase<updateCategories_result, updateCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("updateCategories_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(updateCategories_result.class, metaDataMap);
    }

    public updateCategories_result() {
    }

    public updateCategories_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCategories_result(updateCategories_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public updateCategories_result deepCopy() {
      return new updateCategories_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public updateCategories_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCategories_result)
        return this.equals((updateCategories_result)that);
      return false;
    }

    public boolean equals(updateCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCategories_result typedOther = (updateCategories_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCategories_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class delDoc_args implements TBase<delDoc_args, delDoc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delDoc_args");

    private static final TField DOCID_FIELD_DESC = new TField("docid", TType.STRING, (short)1);

    private String docid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOCID((short)1, "docid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCID
            return DOCID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCID, new FieldMetaData("docid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(delDoc_args.class, metaDataMap);
    }

    public delDoc_args() {
    }

    public delDoc_args(
      String docid)
    {
      this();
      this.docid = docid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delDoc_args(delDoc_args other) {
      if (other.is_set_docid()) {
        this.docid = other.docid;
      }
    }

    public delDoc_args deepCopy() {
      return new delDoc_args(this);
    }

    @Override
    public void clear() {
      this.docid = null;
    }

    public String get_docid() {
      return this.docid;
    }

    public delDoc_args set_docid(String docid) {
      this.docid = docid;
      return this;
    }

    public void unset_docid() {
      this.docid = null;
    }

    /** Returns true if field docid is set (has been asigned a value) and false otherwise */
    public boolean is_set_docid() {
      return this.docid != null;
    }

    public void set_docid_isSet(boolean value) {
      if (!value) {
        this.docid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCID:
        if (value == null) {
          unset_docid();
        } else {
          set_docid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCID:
        return get_docid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCID:
        return is_set_docid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delDoc_args)
        return this.equals((delDoc_args)that);
      return false;
    }

    public boolean equals(delDoc_args that) {
      if (that == null)
        return false;

      boolean this_present_docid = true && this.is_set_docid();
      boolean that_present_docid = true && that.is_set_docid();
      if (this_present_docid || that_present_docid) {
        if (!(this_present_docid && that_present_docid))
          return false;
        if (!this.docid.equals(that.docid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delDoc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delDoc_args typedOther = (delDoc_args)other;

      lastComparison = Boolean.valueOf(is_set_docid()).compareTo(typedOther.is_set_docid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_docid()) {
        lastComparison = TBaseHelper.compareTo(this.docid, typedOther.docid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCID
            if (field.type == TType.STRING) {
              this.docid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.docid != null) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeString(this.docid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delDoc_args(");
      boolean first = true;

      sb.append("docid:");
      if (this.docid == null) {
        sb.append("null");
      } else {
        sb.append(this.docid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class delDoc_result implements TBase<delDoc_result, delDoc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("delDoc_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(delDoc_result.class, metaDataMap);
    }

    public delDoc_result() {
    }

    public delDoc_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delDoc_result(delDoc_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public delDoc_result deepCopy() {
      return new delDoc_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public delDoc_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delDoc_result)
        return this.equals((delDoc_result)that);
      return false;
    }

    public boolean equals(delDoc_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delDoc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delDoc_result typedOther = (delDoc_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delDoc_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class promoteResult_args implements TBase<promoteResult_args, promoteResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("promoteResult_args");

    private static final TField DOCID_FIELD_DESC = new TField("docid", TType.STRING, (short)1);
    private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRING, (short)2);

    private String docid;
    private String query;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      DOCID((short)1, "docid"),
      QUERY((short)2, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCID
            return DOCID;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCID, new FieldMetaData("docid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.QUERY, new FieldMetaData("query", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(promoteResult_args.class, metaDataMap);
    }

    public promoteResult_args() {
    }

    public promoteResult_args(
      String docid,
      String query)
    {
      this();
      this.docid = docid;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public promoteResult_args(promoteResult_args other) {
      if (other.is_set_docid()) {
        this.docid = other.docid;
      }
      if (other.is_set_query()) {
        this.query = other.query;
      }
    }

    public promoteResult_args deepCopy() {
      return new promoteResult_args(this);
    }

    @Override
    public void clear() {
      this.docid = null;
      this.query = null;
    }

    public String get_docid() {
      return this.docid;
    }

    public promoteResult_args set_docid(String docid) {
      this.docid = docid;
      return this;
    }

    public void unset_docid() {
      this.docid = null;
    }

    /** Returns true if field docid is set (has been asigned a value) and false otherwise */
    public boolean is_set_docid() {
      return this.docid != null;
    }

    public void set_docid_isSet(boolean value) {
      if (!value) {
        this.docid = null;
      }
    }

    public String get_query() {
      return this.query;
    }

    public promoteResult_args set_query(String query) {
      this.query = query;
      return this;
    }

    public void unset_query() {
      this.query = null;
    }

    /** Returns true if field query is set (has been asigned a value) and false otherwise */
    public boolean is_set_query() {
      return this.query != null;
    }

    public void set_query_isSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCID:
        if (value == null) {
          unset_docid();
        } else {
          set_docid((String)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unset_query();
        } else {
          set_query((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCID:
        return get_docid();

      case QUERY:
        return get_query();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCID:
        return is_set_docid();
      case QUERY:
        return is_set_query();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof promoteResult_args)
        return this.equals((promoteResult_args)that);
      return false;
    }

    public boolean equals(promoteResult_args that) {
      if (that == null)
        return false;

      boolean this_present_docid = true && this.is_set_docid();
      boolean that_present_docid = true && that.is_set_docid();
      if (this_present_docid || that_present_docid) {
        if (!(this_present_docid && that_present_docid))
          return false;
        if (!this.docid.equals(that.docid))
          return false;
      }

      boolean this_present_query = true && this.is_set_query();
      boolean that_present_query = true && that.is_set_query();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(promoteResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      promoteResult_args typedOther = (promoteResult_args)other;

      lastComparison = Boolean.valueOf(is_set_docid()).compareTo(typedOther.is_set_docid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_docid()) {
        lastComparison = TBaseHelper.compareTo(this.docid, typedOther.docid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_query()).compareTo(typedOther.is_set_query());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_query()) {
        lastComparison = TBaseHelper.compareTo(this.query, typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCID
            if (field.type == TType.STRING) {
              this.docid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // QUERY
            if (field.type == TType.STRING) {
              this.query = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.docid != null) {
        oprot.writeFieldBegin(DOCID_FIELD_DESC);
        oprot.writeString(this.docid);
        oprot.writeFieldEnd();
      }
      if (this.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(this.query);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("promoteResult_args(");
      boolean first = true;

      sb.append("docid:");
      if (this.docid == null) {
        sb.append("null");
      } else {
        sb.append(this.docid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class promoteResult_result implements TBase<promoteResult_result, promoteResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("promoteResult_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(promoteResult_result.class, metaDataMap);
    }

    public promoteResult_result() {
    }

    public promoteResult_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public promoteResult_result(promoteResult_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public promoteResult_result deepCopy() {
      return new promoteResult_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public promoteResult_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof promoteResult_result)
        return this.equals((promoteResult_result)that);
      return false;
    }

    public boolean equals(promoteResult_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(promoteResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      promoteResult_result typedOther = (promoteResult_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("promoteResult_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class dump_args implements TBase<dump_args, dump_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("dump_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(dump_args.class, metaDataMap);
    }

    public dump_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dump_args(dump_args other) {
    }

    public dump_args deepCopy() {
      return new dump_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dump_args)
        return this.equals((dump_args)that);
      return false;
    }

    public boolean equals(dump_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dump_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dump_args typedOther = (dump_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dump_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class dump_result implements TBase<dump_result, dump_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("dump_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(dump_result.class, metaDataMap);
    }

    public dump_result() {
    }

    public dump_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dump_result(dump_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public dump_result deepCopy() {
      return new dump_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public dump_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dump_result)
        return this.equals((dump_result)that);
      return false;
    }

    public boolean equals(dump_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dump_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dump_result typedOther = (dump_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dump_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addScoreFunction_args implements TBase<addScoreFunction_args, addScoreFunction_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addScoreFunction_args");

    private static final TField FUNCTION_INDEX_FIELD_DESC = new TField("functionIndex", TType.I32, (short)1);
    private static final TField DEFINITION_FIELD_DESC = new TField("definition", TType.STRING, (short)2);

    private int functionIndex;
    private String definition;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      FUNCTION_INDEX((short)1, "functionIndex"),
      DEFINITION((short)2, "definition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNCTION_INDEX
            return FUNCTION_INDEX;
          case 2: // DEFINITION
            return DEFINITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FUNCTIONINDEX_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNCTION_INDEX, new FieldMetaData("functionIndex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMap.put(_Fields.DEFINITION, new FieldMetaData("definition", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addScoreFunction_args.class, metaDataMap);
    }

    public addScoreFunction_args() {
    }

    public addScoreFunction_args(
      int functionIndex,
      String definition)
    {
      this();
      this.functionIndex = functionIndex;
      set_functionIndex_isSet(true);
      this.definition = definition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addScoreFunction_args(addScoreFunction_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.functionIndex = other.functionIndex;
      if (other.is_set_definition()) {
        this.definition = other.definition;
      }
    }

    public addScoreFunction_args deepCopy() {
      return new addScoreFunction_args(this);
    }

    @Override
    public void clear() {
      set_functionIndex_isSet(false);
      this.functionIndex = 0;
      this.definition = null;
    }

    public int get_functionIndex() {
      return this.functionIndex;
    }

    public addScoreFunction_args set_functionIndex(int functionIndex) {
      this.functionIndex = functionIndex;
      set_functionIndex_isSet(true);
      return this;
    }

    public void unset_functionIndex() {
      __isset_bit_vector.clear(__FUNCTIONINDEX_ISSET_ID);
    }

    /** Returns true if field functionIndex is set (has been asigned a value) and false otherwise */
    public boolean is_set_functionIndex() {
      return __isset_bit_vector.get(__FUNCTIONINDEX_ISSET_ID);
    }

    public void set_functionIndex_isSet(boolean value) {
      __isset_bit_vector.set(__FUNCTIONINDEX_ISSET_ID, value);
    }

    public String get_definition() {
      return this.definition;
    }

    public addScoreFunction_args set_definition(String definition) {
      this.definition = definition;
      return this;
    }

    public void unset_definition() {
      this.definition = null;
    }

    /** Returns true if field definition is set (has been asigned a value) and false otherwise */
    public boolean is_set_definition() {
      return this.definition != null;
    }

    public void set_definition_isSet(boolean value) {
      if (!value) {
        this.definition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUNCTION_INDEX:
        if (value == null) {
          unset_functionIndex();
        } else {
          set_functionIndex((Integer)value);
        }
        break;

      case DEFINITION:
        if (value == null) {
          unset_definition();
        } else {
          set_definition((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNCTION_INDEX:
        return new Integer(get_functionIndex());

      case DEFINITION:
        return get_definition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUNCTION_INDEX:
        return is_set_functionIndex();
      case DEFINITION:
        return is_set_definition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addScoreFunction_args)
        return this.equals((addScoreFunction_args)that);
      return false;
    }

    public boolean equals(addScoreFunction_args that) {
      if (that == null)
        return false;

      boolean this_present_functionIndex = true;
      boolean that_present_functionIndex = true;
      if (this_present_functionIndex || that_present_functionIndex) {
        if (!(this_present_functionIndex && that_present_functionIndex))
          return false;
        if (this.functionIndex != that.functionIndex)
          return false;
      }

      boolean this_present_definition = true && this.is_set_definition();
      boolean that_present_definition = true && that.is_set_definition();
      if (this_present_definition || that_present_definition) {
        if (!(this_present_definition && that_present_definition))
          return false;
        if (!this.definition.equals(that.definition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addScoreFunction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addScoreFunction_args typedOther = (addScoreFunction_args)other;

      lastComparison = Boolean.valueOf(is_set_functionIndex()).compareTo(typedOther.is_set_functionIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_functionIndex()) {
        lastComparison = TBaseHelper.compareTo(this.functionIndex, typedOther.functionIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_definition()).compareTo(typedOther.is_set_definition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_definition()) {
        lastComparison = TBaseHelper.compareTo(this.definition, typedOther.definition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FUNCTION_INDEX
            if (field.type == TType.I32) {
              this.functionIndex = iprot.readI32();
              set_functionIndex_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // DEFINITION
            if (field.type == TType.STRING) {
              this.definition = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FUNCTION_INDEX_FIELD_DESC);
      oprot.writeI32(this.functionIndex);
      oprot.writeFieldEnd();
      if (this.definition != null) {
        oprot.writeFieldBegin(DEFINITION_FIELD_DESC);
        oprot.writeString(this.definition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addScoreFunction_args(");
      boolean first = true;

      sb.append("functionIndex:");
      sb.append(this.functionIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("definition:");
      if (this.definition == null) {
        sb.append("null");
      } else {
        sb.append(this.definition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addScoreFunction_result implements TBase<addScoreFunction_result, addScoreFunction_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("addScoreFunction_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(addScoreFunction_result.class, metaDataMap);
    }

    public addScoreFunction_result() {
    }

    public addScoreFunction_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addScoreFunction_result(addScoreFunction_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public addScoreFunction_result deepCopy() {
      return new addScoreFunction_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public addScoreFunction_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addScoreFunction_result)
        return this.equals((addScoreFunction_result)that);
      return false;
    }

    public boolean equals(addScoreFunction_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addScoreFunction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addScoreFunction_result typedOther = (addScoreFunction_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addScoreFunction_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeScoreFunction_args implements TBase<removeScoreFunction_args, removeScoreFunction_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("removeScoreFunction_args");

    private static final TField FUNCTION_INDEX_FIELD_DESC = new TField("functionIndex", TType.I32, (short)1);

    private int functionIndex;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      FUNCTION_INDEX((short)1, "functionIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNCTION_INDEX
            return FUNCTION_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FUNCTIONINDEX_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNCTION_INDEX, new FieldMetaData("functionIndex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeScoreFunction_args.class, metaDataMap);
    }

    public removeScoreFunction_args() {
    }

    public removeScoreFunction_args(
      int functionIndex)
    {
      this();
      this.functionIndex = functionIndex;
      set_functionIndex_isSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeScoreFunction_args(removeScoreFunction_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.functionIndex = other.functionIndex;
    }

    public removeScoreFunction_args deepCopy() {
      return new removeScoreFunction_args(this);
    }

    @Override
    public void clear() {
      set_functionIndex_isSet(false);
      this.functionIndex = 0;
    }

    public int get_functionIndex() {
      return this.functionIndex;
    }

    public removeScoreFunction_args set_functionIndex(int functionIndex) {
      this.functionIndex = functionIndex;
      set_functionIndex_isSet(true);
      return this;
    }

    public void unset_functionIndex() {
      __isset_bit_vector.clear(__FUNCTIONINDEX_ISSET_ID);
    }

    /** Returns true if field functionIndex is set (has been asigned a value) and false otherwise */
    public boolean is_set_functionIndex() {
      return __isset_bit_vector.get(__FUNCTIONINDEX_ISSET_ID);
    }

    public void set_functionIndex_isSet(boolean value) {
      __isset_bit_vector.set(__FUNCTIONINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUNCTION_INDEX:
        if (value == null) {
          unset_functionIndex();
        } else {
          set_functionIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNCTION_INDEX:
        return new Integer(get_functionIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUNCTION_INDEX:
        return is_set_functionIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeScoreFunction_args)
        return this.equals((removeScoreFunction_args)that);
      return false;
    }

    public boolean equals(removeScoreFunction_args that) {
      if (that == null)
        return false;

      boolean this_present_functionIndex = true;
      boolean that_present_functionIndex = true;
      if (this_present_functionIndex || that_present_functionIndex) {
        if (!(this_present_functionIndex && that_present_functionIndex))
          return false;
        if (this.functionIndex != that.functionIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeScoreFunction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeScoreFunction_args typedOther = (removeScoreFunction_args)other;

      lastComparison = Boolean.valueOf(is_set_functionIndex()).compareTo(typedOther.is_set_functionIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_functionIndex()) {
        lastComparison = TBaseHelper.compareTo(this.functionIndex, typedOther.functionIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FUNCTION_INDEX
            if (field.type == TType.I32) {
              this.functionIndex = iprot.readI32();
              set_functionIndex_isSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FUNCTION_INDEX_FIELD_DESC);
      oprot.writeI32(this.functionIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeScoreFunction_args(");
      boolean first = true;

      sb.append("functionIndex:");
      sb.append(this.functionIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeScoreFunction_result implements TBase<removeScoreFunction_result, removeScoreFunction_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("removeScoreFunction_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(removeScoreFunction_result.class, metaDataMap);
    }

    public removeScoreFunction_result() {
    }

    public removeScoreFunction_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeScoreFunction_result(removeScoreFunction_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public removeScoreFunction_result deepCopy() {
      return new removeScoreFunction_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public removeScoreFunction_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeScoreFunction_result)
        return this.equals((removeScoreFunction_result)that);
      return false;
    }

    public boolean equals(removeScoreFunction_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeScoreFunction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeScoreFunction_result typedOther = (removeScoreFunction_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeScoreFunction_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listScoreFunctions_args implements TBase<listScoreFunctions_args, listScoreFunctions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listScoreFunctions_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listScoreFunctions_args.class, metaDataMap);
    }

    public listScoreFunctions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listScoreFunctions_args(listScoreFunctions_args other) {
    }

    public listScoreFunctions_args deepCopy() {
      return new listScoreFunctions_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listScoreFunctions_args)
        return this.equals((listScoreFunctions_args)that);
      return false;
    }

    public boolean equals(listScoreFunctions_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listScoreFunctions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listScoreFunctions_args typedOther = (listScoreFunctions_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listScoreFunctions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listScoreFunctions_result implements TBase<listScoreFunctions_result, listScoreFunctions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("listScoreFunctions_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private Map<Integer,String> success;
    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(listScoreFunctions_result.class, metaDataMap);
    }

    public listScoreFunctions_result() {
    }

    public listScoreFunctions_result(
      Map<Integer,String> success,
      IndextankException ite)
    {
      this();
      this.success = success;
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listScoreFunctions_result(listScoreFunctions_result other) {
      if (other.is_set_success()) {
        Map<Integer,String> __this__success = new HashMap<Integer,String>();
        for (Map.Entry<Integer, String> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public listScoreFunctions_result deepCopy() {
      return new listScoreFunctions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ite = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void put_to_success(int key, String val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,String>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,String> get_success() {
      return this.success;
    }

    public listScoreFunctions_result set_success(Map<Integer,String> success) {
      this.success = success;
      return this;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public listScoreFunctions_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Map<Integer,String>)value);
        }
        break;

      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listScoreFunctions_result)
        return this.equals((listScoreFunctions_result)that);
      return false;
    }

    public boolean equals(listScoreFunctions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listScoreFunctions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listScoreFunctions_result typedOther = (listScoreFunctions_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map131 = iprot.readMapBegin();
                this.success = new HashMap<Integer,String>(2*_map131.size);
                for (int _i132 = 0; _i132 < _map131.size; ++_i132)
                {
                  int _key133;
                  String _val134;
                  _key133 = iprot.readI32();
                  _val134 = iprot.readString();
                  this.success.put(_key133, _val134);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.success.size()));
          for (Map.Entry<Integer, String> _iter135 : this.success.entrySet())
          {
            oprot.writeI32(_iter135.getKey());
            oprot.writeString(_iter135.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listScoreFunctions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class stats_args implements TBase<stats_args, stats_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("stats_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(stats_args.class, metaDataMap);
    }

    public stats_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stats_args(stats_args other) {
    }

    public stats_args deepCopy() {
      return new stats_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stats_args)
        return this.equals((stats_args)that);
      return false;
    }

    public boolean equals(stats_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stats_args typedOther = (stats_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stats_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class stats_result implements TBase<stats_result, stats_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("stats_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndexerStats success;
    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, IndexerStats.class)));
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(stats_result.class, metaDataMap);
    }

    public stats_result() {
    }

    public stats_result(
      IndexerStats success,
      IndextankException ite)
    {
      this();
      this.success = success;
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stats_result(stats_result other) {
      if (other.is_set_success()) {
        this.success = new IndexerStats(other.success);
      }
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public stats_result deepCopy() {
      return new stats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ite = null;
    }

    public IndexerStats get_success() {
      return this.success;
    }

    public stats_result set_success(IndexerStats success) {
      this.success = success;
      return this;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public stats_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IndexerStats)value);
        }
        break;

      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stats_result)
        return this.equals((stats_result)that);
      return false;
    }

    public boolean equals(stats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stats_result typedOther = (stats_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new IndexerStats();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_stats_args implements TBase<get_stats_args, get_stats_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_stats_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_stats_args.class, metaDataMap);
    }

    public get_stats_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_stats_args(get_stats_args other) {
    }

    public get_stats_args deepCopy() {
      return new get_stats_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_stats_args)
        return this.equals((get_stats_args)that);
      return false;
    }

    public boolean equals(get_stats_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_stats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_stats_args typedOther = (get_stats_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_stats_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class get_stats_result implements TBase<get_stats_result, get_stats_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("get_stats_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private Map<String,String> success;
    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(get_stats_result.class, metaDataMap);
    }

    public get_stats_result() {
    }

    public get_stats_result(
      Map<String,String> success,
      IndextankException ite)
    {
      this();
      this.success = success;
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_stats_result(get_stats_result other) {
      if (other.is_set_success()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public get_stats_result deepCopy() {
      return new get_stats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ite = null;
    }

    public int get_success_size() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void put_to_success(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> get_success() {
      return this.success;
    }

    public get_stats_result set_success(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public get_stats_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((Map<String,String>)value);
        }
        break;

      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_stats_result)
        return this.equals((get_stats_result)that);
      return false;
    }

    public boolean equals(get_stats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_stats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_stats_result typedOther = (get_stats_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map136 = iprot.readMapBegin();
                this.success = new HashMap<String,String>(2*_map136.size);
                for (int _i137 = 0; _i137 < _map136.size; ++_i137)
                {
                  String _key138;
                  String _val139;
                  _key138 = iprot.readString();
                  _val139 = iprot.readString();
                  this.success.put(_key138, _val139);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter140 : this.success.entrySet())
          {
            oprot.writeString(_iter140.getKey());
            oprot.writeString(_iter140.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_stats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class force_gc_args implements TBase<force_gc_args, force_gc_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("force_gc_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(force_gc_args.class, metaDataMap);
    }

    public force_gc_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public force_gc_args(force_gc_args other) {
    }

    public force_gc_args deepCopy() {
      return new force_gc_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof force_gc_args)
        return this.equals((force_gc_args)that);
      return false;
    }

    public boolean equals(force_gc_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(force_gc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      force_gc_args typedOther = (force_gc_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("force_gc_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class force_gc_result implements TBase<force_gc_result, force_gc_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("force_gc_result");

    private static final TField ITE_FIELD_DESC = new TField("ite", TType.STRUCT, (short)1);

    private IndextankException ite;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ITE((short)1, "ite");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITE
            return ITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITE, new FieldMetaData("ite", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(force_gc_result.class, metaDataMap);
    }

    public force_gc_result() {
    }

    public force_gc_result(
      IndextankException ite)
    {
      this();
      this.ite = ite;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public force_gc_result(force_gc_result other) {
      if (other.is_set_ite()) {
        this.ite = new IndextankException(other.ite);
      }
    }

    public force_gc_result deepCopy() {
      return new force_gc_result(this);
    }

    @Override
    public void clear() {
      this.ite = null;
    }

    public IndextankException get_ite() {
      return this.ite;
    }

    public force_gc_result set_ite(IndextankException ite) {
      this.ite = ite;
      return this;
    }

    public void unset_ite() {
      this.ite = null;
    }

    /** Returns true if field ite is set (has been asigned a value) and false otherwise */
    public boolean is_set_ite() {
      return this.ite != null;
    }

    public void set_ite_isSet(boolean value) {
      if (!value) {
        this.ite = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITE:
        if (value == null) {
          unset_ite();
        } else {
          set_ite((IndextankException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITE:
        return get_ite();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITE:
        return is_set_ite();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof force_gc_result)
        return this.equals((force_gc_result)that);
      return false;
    }

    public boolean equals(force_gc_result that) {
      if (that == null)
        return false;

      boolean this_present_ite = true && this.is_set_ite();
      boolean that_present_ite = true && that.is_set_ite();
      if (this_present_ite || that_present_ite) {
        if (!(this_present_ite && that_present_ite))
          return false;
        if (!this.ite.equals(that.ite))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(force_gc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      force_gc_result typedOther = (force_gc_result)other;

      lastComparison = Boolean.valueOf(is_set_ite()).compareTo(typedOther.is_set_ite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_ite()) {
        lastComparison = TBaseHelper.compareTo(this.ite, typedOther.ite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ITE
            if (field.type == TType.STRUCT) {
              this.ite = new IndextankException();
              this.ite.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_ite()) {
        oprot.writeFieldBegin(ITE_FIELD_DESC);
        this.ite.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("force_gc_result(");
      boolean first = true;

      sb.append("ite:");
      if (this.ite == null) {
        sb.append("null");
      } else {
        sb.append(this.ite);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getStatus_args implements TBase<getStatus_args, getStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getStatus_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
    }

    public getStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_args(getStatus_args other) {
    }

    public getStatus_args deepCopy() {
      return new getStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_args)
        return this.equals((getStatus_args)that);
      return false;
    }

    public boolean equals(getStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatus_args typedOther = (getStatus_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getStatus_result implements TBase<getStatus_result, getStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private IndexerStatus success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      /**
       * 
       * @see IndexerStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new EnumMetaData(TType.ENUM, IndexerStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
    }

    public getStatus_result() {
    }

    public getStatus_result(
      IndexerStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_result(getStatus_result other) {
      if (other.is_set_success()) {
        this.success = other.success;
      }
    }

    public getStatus_result deepCopy() {
      return new getStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see IndexerStatus
     */
    public IndexerStatus get_success() {
      return this.success;
    }

    /**
     * 
     * @see IndexerStatus
     */
    public getStatus_result set_success(IndexerStatus success) {
      this.success = success;
      return this;
    }

    public void unset_success() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean is_set_success() {
      return this.success != null;
    }

    public void set_success_isSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unset_success();
        } else {
          set_success((IndexerStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return get_success();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return is_set_success();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_result)
        return this.equals((getStatus_result)that);
      return false;
    }

    public boolean equals(getStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.is_set_success();
      boolean that_present_success = true && that.is_set_success();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatus_result typedOther = (getStatus_result)other;

      lastComparison = Boolean.valueOf(is_set_success()).compareTo(typedOther.is_set_success());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (is_set_success()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = IndexerStatus.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.is_set_success()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class ping_args implements TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("ping_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class ping_result implements TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("ping_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startFullRecovery_args implements TBase<startFullRecovery_args, startFullRecovery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("startFullRecovery_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(startFullRecovery_args.class, metaDataMap);
    }

    public startFullRecovery_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFullRecovery_args(startFullRecovery_args other) {
    }

    public startFullRecovery_args deepCopy() {
      return new startFullRecovery_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startFullRecovery_args)
        return this.equals((startFullRecovery_args)that);
      return false;
    }

    public boolean equals(startFullRecovery_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startFullRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startFullRecovery_args typedOther = (startFullRecovery_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startFullRecovery_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startFullRecovery_result implements TBase<startFullRecovery_result, startFullRecovery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("startFullRecovery_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(startFullRecovery_result.class, metaDataMap);
    }

    public startFullRecovery_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFullRecovery_result(startFullRecovery_result other) {
    }

    public startFullRecovery_result deepCopy() {
      return new startFullRecovery_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startFullRecovery_result)
        return this.equals((startFullRecovery_result)that);
      return false;
    }

    public boolean equals(startFullRecovery_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startFullRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startFullRecovery_result typedOther = (startFullRecovery_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startFullRecovery_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
