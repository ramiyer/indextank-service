/*
 *  Copyright 2004-2010 Brian S O'Neill
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.cojen.classfile;

/**
 * A label is used to manipulate a branch instruction's branch location. A
 * label has a location address. Branch instructions have origin addresses, 
 * which contain the address of the opcode that performs the conditional or 
 * unconditional branch.
 *
 * <p>Labels are generated by factory methods in the CodeBuilder class. 
 * If a label has any origin addresses, its location address must be set by 
 * the time the CodeBuilder's class file is output.
 *
 * @author Brian S O'Neill
 * @see CodeBuilder
 */
public interface Label extends Location {
    /**
     * Sets the location of a label to be at the current postion in the
     * code being generated.
     *
     * @return the Label itself.
     */
    Label setLocation();

    /**
     * Returns -1 if the location isn't yet fully resolved.
     *
     * @exception IllegalStateException when the location is unknown because
     * the setLocation method was never called.
     */
    int getLocation() throws IllegalStateException;
}
